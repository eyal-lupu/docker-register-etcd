#!/bin/sh

ETCD_HOST="{{ .Env.ETCD_HOST }}"
REMOVE_UNKNOWN_BACKEND="{{.Env.REMOVE_UNKNOWN_BACKEND}}"

# Alive Hosts
HOSTS=""

{{ range $backend, $containers := groupByMulti $ "Labels.backend" "," }}

{{ range $container := $containers }}
HOSTS="$HOSTS {{ $container.Hostname }}"
	{{ $addrLen := len $container.Addresses }}
	{{/* If only 1 port exposed, use that */}}
	{{ if eq $addrLen 1 }}
		{{ $address := index $container.Addresses 0 }}
etcdctl -C $ETCD_HOST set --ttl=10 /backends/{{ $backend }}/servers/{{ $container.Hostname }}/url {{ $address.IP }}:{{ $address.Port }}
	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
	{{ else }}
		{{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
		{{ $address := where $container.Addresses "Port" $port | first }}
etcdctl -C $ETCD_HOST set --ttl=10 /backends/{{ $backend }}/servers/{{ $container.Hostname }}/url {{ $address.IP }}:{{ $address.Port }}
	{{ end }}
{{ end }}


{{ end }}

if [ "$REMOVE_UNKNOWN_BACKEND" = "true" ]
then

# Remove entry in etcd but not in HOSTS list
IN_ETCD=`etcdctl -C $ETCD_HOST ls --recursive | grep '/backends/[^/]*/servers/[^/]*$'`

INVALID=""

for i in $IN_ETCD
do
  IN=0
  for j in $HOSTS
  do
    # use host name to compare
    h=`echo $i | cut -f 5 -d '/'`
    if [ "$h" = "$j" ]
    then
      IN=1
      break;
    fi
  done
  # not in the list, to be removed
  if [ $IN = 0 ]
  then
    INVALID="$INVALID $i"
  fi
done

echo "Removing unknown backends: $INVALID"

for i in $INVALID
do
  etcdctl -C $ETCD_HOST rm --recursive $i
done

fi
